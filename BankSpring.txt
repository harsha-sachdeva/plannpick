package com.cg.spring.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.cg.spring.exception.BankBalanceException;
import com.cg.spring.exception.AccountCreateException;
import com.cg.spring.exception.BankException;
import com.cg.spring.model.Account;
import com.cg.spring.service.IBankService;

@Controller
public class BankController {

	@Autowired
	IBankService service;

	@RequestMapping("/home")
	public String addPage() {
		String view = "menu";
		return view;
	}

	@RequestMapping("/add")
	public String addAccountScreen(Model model) {
		String view = "addAccount";
		model.addAttribute("Account", new Account());
		return view;
	}

	@RequestMapping(value = "/accountAdded", method = RequestMethod.POST)
	public String AccountIdGenerator(Model model, @ModelAttribute("Account") Account account) {
		String view = "";
		try {
			int id = service.addAccount(account);
			model.addAttribute("accountId", id);
			view = "idGenerated";
		} catch (AccountCreateException e) {
			model.addAttribute("error", e.getMessage());
			view = "errorPage";
		}
		return view;
	}

	@RequestMapping("/deposit")
	public String depositScreen() {
		String view = "depositMoney";
		return view;
	}

	@RequestMapping(value = "/moneyDeposited", method = RequestMethod.POST)
	public String moneyDeposited(Model model, @RequestParam("accountId") int accountId,
			@RequestParam("money") int money) {
		String view = "";
		try {
			int accBalance = service.depositMoney(accountId, money);
			model.addAttribute("accountBalance", accBalance);
			view = "balanceScreen";
		} catch (BankException e) {
			model.addAttribute("error", e.getMessage());
			view = "errorPage";
		}
		return view;
	}

	@RequestMapping("/withdraw")
	public String withdrawScreen() {
		String view = "withdraw";
		return view;
	}

	@RequestMapping(value = "/moneyWithdrawed", method = RequestMethod.POST)
	public String moneyWithdrawed(Model model, @RequestParam("accountId") int accountId,
			@RequestParam("money") int money) {
		String view = "";
		try {
			int accBalance = service.withdrawMoney(accountId, money);
			model.addAttribute("accountBalance", accBalance);
			view = "balanceScreen";
		} catch (BankException e) {
			model.addAttribute("error", e.getMessage());
			view = "errorPage";
		} catch (BankBalanceException e) {
			model.addAttribute("error", e.getMessage());
			view = "errorPage";
		}
		return view;
	}

	@RequestMapping("/transfer")
	public String transferScreen() {
		String view = "fundTransfer";
		return view;
	}

	@RequestMapping(value = "/fundTransfer", method = RequestMethod.POST)
	public String transferMoney(Model model, @RequestParam("accountId") int accountId,
			@RequestParam("receiverAccountId") int receiverId, @RequestParam("money") int money) {
		String view = "";
		try {
			String transfer = service.fundTransfer(accountId, receiverId, money);
			model.addAttribute("transferMessage", transfer);
			view = "success";
		} catch (BankException e) {
			model.addAttribute("error", e.getMessage());
			view = "errorPage";
		} catch (BankBalanceException e) {
			model.addAttribute("error", e.getMessage());
			view = "errorPage";
		}
		return view;
	}

	@RequestMapping("/balance")
	public String showBalanceScreen() {
		String view = "showBalance";
		return view;
	}

	@RequestMapping(value = "/availableBalance", method = RequestMethod.POST)
	public String availableBalance(Model model, @RequestParam("accountId") int accountId) {
		String view = "showAvailableBalance";
		try {
			int balance = service.showBalance(accountId);
			model.addAttribute("balance", balance);
			view = "balanceValue";
		} catch (BankException e) {
			model.addAttribute("error", e.getMessage());
			view = "errorPage";
		}
		return view;
	}

	@RequestMapping("/details")
	public String showDetails() {
		String view = "showDetails";
		return view;
	}

	@RequestMapping("/availableDetails")
	public String availableDetails(Model model, @RequestParam("accountId") int accountId) {
		String view = "";
		try {
			Account acc = service.showDetails(accountId);
			model.addAttribute("accountDetails", acc);
			view = "userData";
		} catch (BankException e) {
			model.addAttribute("error", e.getMessage());
			view = "errorPage";
		}
		return view;
	}
}






package com.cg.spring.dao;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import org.springframework.stereotype.Repository;
import com.cg.spring.exception.BankBalanceException;
import com.cg.spring.exception.AccountCreateException;
import com.cg.spring.exception.BankException;
import com.cg.spring.model.Account;

@Repository
public class BankDAOImpl implements IBankDAO {

	@PersistenceContext
	EntityManager manager;

	@Override
	public int addAccount(Account acc) throws AccountCreateException {
		// logger.info("In addAccount method");
		int id = 0;
		manager.persist(acc);

		id = getAccountId();
		if (id == 0)
			throw new AccountCreateException("Account creation failed!");
		return id;
	}

	public int getAccountId() throws AccountCreateException {
		// logger.info("In getAccountId method");
		int id = 0;
		String jpql = "Select max(acc.accNumber) from Account acc";
		Query query = manager.createQuery(jpql);
		id = (int) query.getSingleResult();
		return id;
	}

	@Override
	public int depositMoney(int accNumber, int money) throws BankException {
		// logger.info("In depositMoney method");
		int bal = 0;
		boolean isValid = isIdPresent(accNumber);
		if (isValid == true) {
			String jpql = "Select acc.balance from Account acc where acc.accNumber = :accNum";
			Query query = manager.createQuery(jpql);
			query.setParameter("accNum", accNumber);
			bal = (Integer) query.getSingleResult();
			bal = bal + money;

			Account acc = manager.find(Account.class, accNumber);
			acc.setBalance(bal);

			jpql = "Select acc.balance from Account acc where acc.accNumber = :accNum";
			query = manager.createQuery(jpql);
			query.setParameter("accNum", accNumber);
			bal = (Integer) query.getSingleResult();
		} else
			throw new BankException("Account doesn't exist!");
		return bal;
	}

	@Override
	public int withdrawMoney(int accNumber, int money) throws BankException, BankBalanceException {
		// logger.info("In withdrawMoney method");
		int minBalance = 500;
		int bal = 0;
		boolean isValid = isIdPresent(accNumber);
		if (isValid == true) {
			String jpql = "Select acc.balance from Account acc where acc.accNumber = :accNum";
			TypedQuery<Integer> query = manager.createQuery(jpql, Integer.class);
			query.setParameter("accNum", accNumber);
			bal = query.getSingleResult();
			if ((bal - money) < minBalance)
				throw new BankBalanceException("Insufficient balance for this transaction");
			else
				bal = bal - money;

			Account acc = manager.find(Account.class, accNumber);
			acc.setBalance(bal);

			jpql = "Select acc.balance from Account acc where acc.accNumber = :accNum";
			query = manager.createQuery(jpql, Integer.class);
			query.setParameter("accNum", accNumber);
			bal = (Integer) query.getSingleResult();
		} else
			throw new BankException("Account doesn't exist!");
		return bal;
	}

	@Override
	public String fundTransfer(int accNumber, int receiverAccNumber, int money)
			throws BankException, BankBalanceException {
		// logger.info("In fundTransfer method");
		withdrawMoney(accNumber, money);
		depositMoney(receiverAccNumber, money);
		return "fund transfer successful";
	}

	@Override
	public ArrayList<String> showTransactions(int accNumber) {
		// logger.info("In showTransaction method");
		return null;
	}

	@Override
	public int showBalance(int accNumber) throws BankException {
		// logger.info("In showBalance method");
		int bal = 0;
		boolean isValid = isIdPresent(accNumber);
		if (isValid == true) {
			String jpql = "Select acc.balance from Account acc where acc.accNumber = :accNum";
			TypedQuery<Integer> query = manager.createQuery(jpql, Integer.class);
			query.setParameter("accNum", accNumber);
			bal = query.getSingleResult();
		} else
			throw new BankException("Account doesn't exist!");
		return bal;
	}

	@Override
	public Account showDetails(int accNumber) throws BankException {
		// logger.info("In showDetails method");
		Account acc;
		boolean isValid = isIdPresent(accNumber);
		if (isValid == true) {
			String jpql = "Select acc from Account acc where acc.accNumber = :accNum";
			TypedQuery<Account> query = manager.createQuery(jpql, Account.class);
			query.setParameter("accNum", accNumber);
			acc = query.getSingleResult();
		} else
			throw new BankException("Account doesn't exist!");
		return acc;
	}

	public boolean isIdPresent(int accountId) {
		// logger.info("In isIdPresent method");
		String jpql = "Select acc.accNumber from Account acc";
		Query query = manager.createQuery(jpql);
		List<?> list = (List<?>) query.getResultList();
		if (list.contains(accountId))
			return true;
		else
			return false;
	}
}




package com.cg.spring.dao;

import java.util.ArrayList;

import com.cg.spring.exception.BankBalanceException;
import com.cg.spring.exception.AccountCreateException;
import com.cg.spring.exception.BankException;
import com.cg.spring.model.Account;

public interface IBankDAO {
	public int addAccount(Account acc) throws AccountCreateException;

	public int depositMoney(int accNumber, int money) throws BankException;

	public int withdrawMoney(int accNumber, int money) throws BankException, BankBalanceException;

	public String fundTransfer(int accNumber, int receiverAccNumber, int money)
			throws BankException, BankBalanceException;

	public ArrayList<String> showTransactions(int accNumber);

	public int showBalance(int accNumber) throws BankException;

	public Account showDetails(int accHolder) throws BankException;
}







package com.cg.spring.exception;

public class AccountCreateException extends Exception {
	private static final long serialVersionUID = 1L;
	String msg;

	public AccountCreateException(String msg) {
		this.msg = msg;
	}

	public String getMessage() {
		return msg;
	}
}





package com.cg.spring.exception;

public class BankBalanceException extends Exception {
	private static final long serialVersionUID = 1L;
	String msg;

	public BankBalanceException(String msg) {
		this.msg = msg;
	}

	public String getMessage() {
		return msg;
	}
}




package com.cg.spring.exception;

public class BankException extends Exception {
	private static final long serialVersionUID = 1L;
	String msg;

	public BankException(String msg) {
		this.msg = msg;
	}

	public String getMessage() {
		return msg;
	}
}






package com.cg.spring.model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "Account_info")
public class Account {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "AccID")
	private int accNumber;

	@Column(name = "HolderName")
	private String accHolderName;

	@Column(name = "DOB")
	private String date;

	@Column(name = "Gender")
	private String gender;

	@Column(name = "PAN")
	private String panNumber;

	@Column(name = "Address")
	private String accHolderAddr;

	@Column(name = "Balance")
	private int balance;

	@Column(name = "Contact")
	private long phoneNo;

	public Account() {

	}

	public String getAccHolderName() {
		return accHolderName;
	}

	public void setAccHolderName(String accHolderName) {
		this.accHolderName = accHolderName;
	}

	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
	}

	public String getPanNumber() {
		return panNumber;
	}

	public void setPanNumber(String panNumber) {
		this.panNumber = panNumber;
	}

	public String getAccHolderAddr() {
		return accHolderAddr;
	}

	public void setAccHolderAddr(String accHolderAddr) {
		this.accHolderAddr = accHolderAddr;
	}

	public int getAccNumber() {
		return accNumber;
	}

	public void setAccNumber(int accNumber) {
		this.accNumber = accNumber;
	}

	public int getBalance() {
		return balance;
	}

	public void setBalance(int balance) {
		this.balance = balance;
	}

	public long getPhoneNo() {
		return phoneNo;
	}

	public void setPhoneNo(long phoneNo) {
		this.phoneNo = phoneNo;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public Account(int accNumber, String accHolderName, String date, String gender, String panNumber,
			String accHolderAddr, int balance, long phoneNo) {
		super();
		this.accNumber = accNumber;
		this.accHolderName = accHolderName;
		this.date = date;
		this.gender = gender;
		this.panNumber = panNumber;
		this.accHolderAddr = accHolderAddr;
		this.balance = balance;
		this.phoneNo = phoneNo;
	}

}





package com.cg.spring.service;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cg.spring.dao.BankDAOImpl;
import com.cg.spring.exception.BankBalanceException;
import com.cg.spring.exception.AccountCreateException;
import com.cg.spring.exception.BankException;
import com.cg.spring.model.Account;

@Service
@Transactional
public class BankServiceImpl implements IBankService {

	@Autowired
	BankDAOImpl dao;

	@Override
	public int addAccount(Account acc) throws AccountCreateException {
		// logger.info("Inside addAccount in service");
		return dao.addAccount(acc);
	}

	@Override
	public int depositMoney(int accNumber, int money) throws BankException {
		// logger.info("Inside depositMoney in service");
		return dao.depositMoney(accNumber, money);
	}

	@Override
	public int withdrawMoney(int accNumber, int money) throws BankException, BankBalanceException {
		// logger.info("Inside withdrawMoney in service");
		return dao.withdrawMoney(accNumber, money);
	}

	@Override
	public String fundTransfer(int accNumber, int receiverAccNumber, int money)
			throws BankException, BankBalanceException {
		// logger.info("Inside fundTransfer in service");
		return dao.fundTransfer(accNumber, receiverAccNumber, money);
	}

	@Override
	public ArrayList<String> showTransactions(int accNumber) {
		// logger.info("Inside showTransfer in service");
		return dao.showTransactions(accNumber);
	}

	@Override
	public int showBalance(int accNumber) throws BankException {
		// logger.info("Inside showBalance in service");
		return dao.showBalance(accNumber);
	}

	@Override
	public Account showDetails(int accNumber) throws BankException {
		// logger.info("Inside showDetails in service");
		return dao.showDetails(accNumber);
	}
}





package com.cg.spring.service;

import java.util.ArrayList;

import com.cg.spring.exception.BankBalanceException;
import com.cg.spring.exception.AccountCreateException;
import com.cg.spring.exception.BankException;
import com.cg.spring.model.Account;

public interface IBankService {
	public int addAccount(Account acc) throws AccountCreateException;

	public int depositMoney(int accNumber, int money) throws BankException;

	public int withdrawMoney(int accNumber, int money) throws BankException, BankBalanceException;

	public String fundTransfer(int accNumber, int receiverAccNumber, int money)
			throws BankException, BankBalanceException;

	public ArrayList<String> showTransactions(int accNumber);

	public int showBalance(int accNumber) throws BankException;

	public Account showDetails(int accNumber) throws BankException;
}
